# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: aws-shop-be
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

frameworkVersion: '3'
useDotenv: true
plugins:
  - serverless-auto-swagger # should be first
  - serverless-offline
  - serverless-webpack

custom:
  webpack:
    webpackConfig: webpack.config.js
    includeModules: true
    packager: 'npm'
    excludeFiles: ['/*.test.js']
    excludeRegex: .test.js
provider:
  name: aws
  runtime: nodejs14.x
  region: ${env:REGION}

  environment:
    PRODUCTS_TABLE: ${env:PRODUCTS_TABLE}
    STOCKS_TABLE: ${env:STOCKS_TABLE}
    NODE_OPTIONS: '--enable-source-maps --stack-trace-limit=1000'
    SQS_QUEUE_URL: { Ref: 'SQSQueue' }
    SNS_TOPIC_ARN: { Ref: 'SNSTopic' }
    SNS_TOPIC_NAME: ${env:SNS_TOPIC_NAME}
    SNS_SUBSCRIPTION_EMAIL: ${env:SNS_SUBSCRIPTION_EMAIL}
    SNS_HIGH_PRICE_SUBSCRIPTION_EMAIL: ${env:SNS_HIGH_PRICE_SUBSCRIPTION_EMAIL}
    SNS_LOW_PRICE_SUBSCRIPTION_EMAIL: ${env:SNS_LOW_PRICE_SUBSCRIPTION_EMAIL}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sqs:*
      Resource: { 'Fn::GetAtt': ['SQSQueue', 'Arn'] }
    - Effect: Allow
      Action:
        - sns:*
      Resource: { Ref: 'SNSTopic' }

functions:
  getProductsList:
    handler: handler.getProductsList
    events:
      - http:
          path: /products
          method: get
          cors: true
  getProductsById:
    handler: handler.getProductsById
    events:
      - http:
          path: /products/{productId}
          method: get
          cors: true
  createProduct:
    handler: handler.createProduct
    events:
      - http:
          path: /products
          method: post
          cors: true
  catalogBatchProcess:
    handler: handler.catalogBatchProcess
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn
          batchSize: 5

package:
  #webpack:
  #  webpackConfig: 'webpack.config.js'
  #  includeModules: true
  #  packager: 'npm'
  #  excludeFiles: ['*.d.js', '*.d.ts', '*.py', '/*.test.js']
  autoswagger:
    title: 'Product service API'
    typefiles: ['./types/product.ts', './types/stock.ts']
    schemes: ['https', 'http']
    basePath: '/dev'
  individually: true
  # exclude:
  #   - node_modules/**

resources:
  Resources:
    products:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    stocks:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          - AttributeName: product_id
            AttributeType: S
        KeySchema:
          - AttributeName: product_id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${env:SQS_QUEUE_NAME}
    SNSTopic:
      Type: 'AWS::SNS::Topic'
      Properties:
        TopicName: ${env:SNS_TOPIC_NAME}
    SNSSubscription:
      Type: 'AWS::SNS::Subscription'
      Properties:
        Endpoint: ${env:SNS_SUBSCRIPTION_EMAIL}
        Protocol: 'email'
        TopicArn: { Ref: 'SNSTopic' }
    SNSHighPriceSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: ${env:SNS_HIGH_PRICE_SUBSCRIPTION_EMAIL}
        TopicArn: { Ref: 'SNSTopic' }
        FilterPolicy:
          price:
            - High
    SNSLowPriceSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Protocol: email
        Endpoint: ${env:SNS_LOW_PRICE_SUBSCRIPTION_EMAIL}
        TopicArn: { Ref: 'SNSTopic' }
        FilterPolicy:
          price:
            - Low
# you can add statements to the Lambda function's IAM Role here
#  iam:
#    role:
#      statements:
#        - Effect: "Allow"
#          Action:
#            - "s3:ListBucket"
#          Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#        - Effect: "Allow"
#          Action:
#            - "s3:PutObject"
#          Resource:
#            Fn::Join:
#              - ""
#              - - "arn:aws:s3:::"
#                - "Ref" : "ServerlessDeploymentBucket"
#                - "/*"

# you can define service wide environment variables here
#  environment:
#    variable1: value1

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

#functions:
#  hello:
#    handler: handler.hello
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - httpApi:
#          path: /users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
